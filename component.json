{
    "title": "AWS Step Functions",
    "description": "AWS Step Functions AWS Step Functions is a service that lets you coordinate the\ncomponents of distributed applications and microservices using visual workflows.\n\nYou can use Step Functions to build applications from individual components,\neach of which performs a discrete function, or task, allowing you to scale and\nchange applications quickly. Step Functions provides a console that helps\nvisualize the components of your application as a series of steps. Step\nFunctions automatically triggers and tracks each step, and retries steps when\nthere are errors, so your application executes predictably and in the right\norder every time. Step Functions logs the state of each step, so you can quickly\ndiagnose and debug any issues.\n\nStep Functions manages operations and underlying infrastructure to ensure your\napplication is available at any scale. You can run tasks on AWS, your own\nservers, or any system that has access to AWS. You can access and use Step\nFunctions using the console, the AWS SDKs, or an HTTP API. For more information\nabout Step Functions, see the AWS Step Functions Developer Guide\n[https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html] .",
    "docsUrl": "https://docs.aws.amazon.com/states/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/states/2016-11-23/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://states.amazonaws.com/",
                    "http://states.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "CreateActivity": {
            "main": "./lib/actions/CreateActivity.js",
            "title": "CreateActivity",
            "description": "Creates an activity. An activity is a task that you write in any programming\nlanguage and host on any machine that has access to AWS Step Functions.\nActivities must poll Step Functions using the GetActivityTask API action and\nrespond using SendTask* API actions. This function lets Step Functions know the\nexistence of your activity and returns an identifier for use in a state machine\nand when polling from the activity.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateActivity.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateStateMachine": {
            "main": "./lib/actions/CreateStateMachine.js",
            "title": "CreateStateMachine",
            "description": "Creates a state machine. A state machine consists of a collection of states that\ncan do work (Task states), determine to which states to transition next (Choice \nstates), stop an execution with an error (Fail states), and so on. State\nmachines are specified using a JSON-based, structured language.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateStateMachine.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteActivity": {
            "main": "./lib/actions/DeleteActivity.js",
            "title": "DeleteActivity",
            "description": "Deletes an activity.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteActivity.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteStateMachine": {
            "main": "./lib/actions/DeleteStateMachine.js",
            "title": "DeleteStateMachine",
            "description": "Deletes a state machine. This is an asynchronous operation: It sets the state\nmachine's status to DELETING and begins the deletion process. Each state machine\nexecution is deleted the next time it makes a state transition.\n\nThe state machine itself is deleted after all executions are completed or\ndeleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteStateMachine.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeActivity": {
            "main": "./lib/actions/DescribeActivity.js",
            "title": "DescribeActivity",
            "description": "Describes an activity.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeActivity.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeExecution": {
            "main": "./lib/actions/DescribeExecution.js",
            "title": "DescribeExecution",
            "description": "Describes an execution.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeExecution.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeStateMachine": {
            "main": "./lib/actions/DescribeStateMachine.js",
            "title": "DescribeStateMachine",
            "description": "Describes a state machine.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeStateMachine.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeStateMachineForExecution": {
            "main": "./lib/actions/DescribeStateMachineForExecution.js",
            "title": "DescribeStateMachineForExecution",
            "description": "Describes the state machine associated with a specific execution.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeStateMachineForExecution.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetActivityTask": {
            "main": "./lib/actions/GetActivityTask.js",
            "title": "GetActivityTask",
            "description": "Used by workers to retrieve a task (with the specified activity ARN) which has\nbeen scheduled for execution by a running state machine. This initiates a long\npoll, where the service holds the HTTP connection open and responds as soon as a\ntask becomes available (i.e. an execution of a task of this type is needed.) The\nmaximum time the service holds on to the request before responding is 60\nseconds. If no task is available within 60 seconds, the poll returns a taskToken \nwith a null string.\n\nWorkers should set their client side socket timeout to at least 65 seconds (5\nseconds higher than the maximum time the service may hold the poll request).\n\nPolling with GetActivityTask can cause latency in some implementations. See \nAvoid Latency When Polling for Activity Tasks\n[https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html] \nin the Step Functions Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetActivityTask.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetExecutionHistory": {
            "main": "./lib/actions/GetExecutionHistory.js",
            "title": "GetExecutionHistory",
            "description": "Returns the history of the specified execution as a list of events. By default,\nthe results are returned in ascending order of the timeStamp of the events. Use\nthe reverseOrder parameter to get the latest events first.\n\nIf nextToken is returned, there are more results available. The value of \nnextToken is a unique pagination token for each page. Make the call again using\nthe returned token to retrieve the next page. Keep all other arguments\nunchanged. Each pagination token expires after 24 hours. Using an expired\npagination token will return an HTTP 400 InvalidToken error.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetExecutionHistory.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListActivities": {
            "main": "./lib/actions/ListActivities.js",
            "title": "ListActivities",
            "description": "Lists the existing activities.\n\nIf nextToken is returned, there are more results available. The value of \nnextToken is a unique pagination token for each page. Make the call again using\nthe returned token to retrieve the next page. Keep all other arguments\nunchanged. Each pagination token expires after 24 hours. Using an expired\npagination token will return an HTTP 400 InvalidToken error.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListActivities.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListExecutions": {
            "main": "./lib/actions/ListExecutions.js",
            "title": "ListExecutions",
            "description": "Lists the executions of a state machine that meet the filtering criteria.\nResults are sorted by time, with the most recent execution first.\n\nIf nextToken is returned, there are more results available. The value of \nnextToken is a unique pagination token for each page. Make the call again using\nthe returned token to retrieve the next page. Keep all other arguments\nunchanged. Each pagination token expires after 24 hours. Using an expired\npagination token will return an HTTP 400 InvalidToken error.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListExecutions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListStateMachines": {
            "main": "./lib/actions/ListStateMachines.js",
            "title": "ListStateMachines",
            "description": "Lists the existing state machines.\n\nIf nextToken is returned, there are more results available. The value of \nnextToken is a unique pagination token for each page. Make the call again using\nthe returned token to retrieve the next page. Keep all other arguments\nunchanged. Each pagination token expires after 24 hours. Using an expired\npagination token will return an HTTP 400 InvalidToken error.\n\nThis operation is eventually consistent. The results are best effort and may not\nreflect very recent updates and changes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListStateMachines.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTagsForResource": {
            "main": "./lib/actions/ListTagsForResource.js",
            "title": "ListTagsForResource",
            "description": "List tags for a given resource.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTagsForResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SendTaskFailure": {
            "main": "./lib/actions/SendTaskFailure.js",
            "title": "SendTaskFailure",
            "description": "Used by workers to report that the task identified by the <code>taskToken</code> failed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SendTaskFailure.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SendTaskHeartbeat": {
            "main": "./lib/actions/SendTaskHeartbeat.js",
            "title": "SendTaskHeartbeat",
            "description": "Used by workers to report to the service that the task represented by the\nspecified taskToken is still making progress. This action resets the Heartbeat \nclock. The Heartbeat threshold is specified in the state machine's Amazon States\nLanguage definition. This action does not in itself create an event in the\nexecution history. However, if the task times out, the execution history\ncontains an ActivityTimedOut event.\n\nThe Timeout of a task, defined in the state machine's Amazon States Language\ndefinition, is its maximum allowed duration, regardless of the number of \nSendTaskHeartbeat requests received.\n\nThis operation is only useful for long-lived tasks to report the liveliness of\nthe task.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SendTaskHeartbeat.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SendTaskSuccess": {
            "main": "./lib/actions/SendTaskSuccess.js",
            "title": "SendTaskSuccess",
            "description": "Used by workers to report that the task identified by the <code>taskToken</code> completed successfully.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SendTaskSuccess.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartExecution": {
            "main": "./lib/actions/StartExecution.js",
            "title": "StartExecution",
            "description": "Starts a state machine execution.\n\n StartExecution is idempotent. If StartExecution is called with the same name\nand input as a running execution, the call will succeed and return the same\nresponse as the original request. If the execution is closed or if the input is\ndifferent, it will return a 400 ExecutionAlreadyExists error. Names can be\nreused after 90 days.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartExecution.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StopExecution": {
            "main": "./lib/actions/StopExecution.js",
            "title": "StopExecution",
            "description": "Stops an execution.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StopExecution.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagResource": {
            "main": "./lib/actions/TagResource.js",
            "title": "TagResource",
            "description": "Add a tag to a Step Functions resource.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagResource": {
            "main": "./lib/actions/UntagResource.js",
            "title": "UntagResource",
            "description": "Remove a tag from a Step Functions resource",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateStateMachine": {
            "main": "./lib/actions/UpdateStateMachine.js",
            "title": "UpdateStateMachine",
            "description": "Updates an existing state machine by modifying its definition and/or roleArn.\nRunning executions will continue to use the previous definition and roleArn. You\nmust include at least one of definition or roleArn or you will receive a \nMissingRequiredParameter error.\n\nAll StartExecution calls within a few seconds will use the updated definition \nand roleArn. Executions started immediately after calling UpdateStateMachine may\nuse the previous state machine definition and roleArn.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateStateMachine.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}